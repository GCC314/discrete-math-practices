Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> VAR
Rule 2     expression -> TRUE
Rule 3     expression -> FALSE
Rule 4     expression -> LBRAC expression RBRAC
Rule 5     expression -> NOT expression
Rule 6     expression -> expression AND expression
Rule 7     expression -> expression OR expression
Rule 8     expression -> expression IFTHEN expression
Rule 9     expression -> expression IFF expression

Terminals, with rules where they appear

AND                  : 6
FALSE                : 3
IFF                  : 9
IFTHEN               : 8
LBRAC                : 4
NOT                  : 5
OR                   : 7
RBRAC                : 4
TRUE                 : 2
VAR                  : 1
error                : 

Nonterminals, with rules where they appear

expression           : 4 5 6 6 7 7 8 8 9 9 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . VAR
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . LBRAC expression RBRAC
    (5) expression -> . NOT expression
    (6) expression -> . expression AND expression
    (7) expression -> . expression OR expression
    (8) expression -> . expression IFTHEN expression
    (9) expression -> . expression IFF expression

    VAR             shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 4
    LBRAC           shift and go to state 5
    NOT             shift and go to state 6

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (6) expression -> expression . AND expression
    (7) expression -> expression . OR expression
    (8) expression -> expression . IFTHEN expression
    (9) expression -> expression . IFF expression

    AND             shift and go to state 7
    OR              shift and go to state 8
    IFTHEN          shift and go to state 9
    IFF             shift and go to state 10


state 2

    (1) expression -> VAR .

    AND             reduce using rule 1 (expression -> VAR .)
    OR              reduce using rule 1 (expression -> VAR .)
    IFTHEN          reduce using rule 1 (expression -> VAR .)
    IFF             reduce using rule 1 (expression -> VAR .)
    $end            reduce using rule 1 (expression -> VAR .)
    RBRAC           reduce using rule 1 (expression -> VAR .)


state 3

    (2) expression -> TRUE .

    AND             reduce using rule 2 (expression -> TRUE .)
    OR              reduce using rule 2 (expression -> TRUE .)
    IFTHEN          reduce using rule 2 (expression -> TRUE .)
    IFF             reduce using rule 2 (expression -> TRUE .)
    $end            reduce using rule 2 (expression -> TRUE .)
    RBRAC           reduce using rule 2 (expression -> TRUE .)


state 4

    (3) expression -> FALSE .

    AND             reduce using rule 3 (expression -> FALSE .)
    OR              reduce using rule 3 (expression -> FALSE .)
    IFTHEN          reduce using rule 3 (expression -> FALSE .)
    IFF             reduce using rule 3 (expression -> FALSE .)
    $end            reduce using rule 3 (expression -> FALSE .)
    RBRAC           reduce using rule 3 (expression -> FALSE .)


state 5

    (4) expression -> LBRAC . expression RBRAC
    (1) expression -> . VAR
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . LBRAC expression RBRAC
    (5) expression -> . NOT expression
    (6) expression -> . expression AND expression
    (7) expression -> . expression OR expression
    (8) expression -> . expression IFTHEN expression
    (9) expression -> . expression IFF expression

    VAR             shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 4
    LBRAC           shift and go to state 5
    NOT             shift and go to state 6

    expression                     shift and go to state 11

state 6

    (5) expression -> NOT . expression
    (1) expression -> . VAR
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . LBRAC expression RBRAC
    (5) expression -> . NOT expression
    (6) expression -> . expression AND expression
    (7) expression -> . expression OR expression
    (8) expression -> . expression IFTHEN expression
    (9) expression -> . expression IFF expression

    VAR             shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 4
    LBRAC           shift and go to state 5
    NOT             shift and go to state 6

    expression                     shift and go to state 12

state 7

    (6) expression -> expression AND . expression
    (1) expression -> . VAR
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . LBRAC expression RBRAC
    (5) expression -> . NOT expression
    (6) expression -> . expression AND expression
    (7) expression -> . expression OR expression
    (8) expression -> . expression IFTHEN expression
    (9) expression -> . expression IFF expression

    VAR             shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 4
    LBRAC           shift and go to state 5
    NOT             shift and go to state 6

    expression                     shift and go to state 13

state 8

    (7) expression -> expression OR . expression
    (1) expression -> . VAR
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . LBRAC expression RBRAC
    (5) expression -> . NOT expression
    (6) expression -> . expression AND expression
    (7) expression -> . expression OR expression
    (8) expression -> . expression IFTHEN expression
    (9) expression -> . expression IFF expression

    VAR             shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 4
    LBRAC           shift and go to state 5
    NOT             shift and go to state 6

    expression                     shift and go to state 14

state 9

    (8) expression -> expression IFTHEN . expression
    (1) expression -> . VAR
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . LBRAC expression RBRAC
    (5) expression -> . NOT expression
    (6) expression -> . expression AND expression
    (7) expression -> . expression OR expression
    (8) expression -> . expression IFTHEN expression
    (9) expression -> . expression IFF expression

    VAR             shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 4
    LBRAC           shift and go to state 5
    NOT             shift and go to state 6

    expression                     shift and go to state 15

state 10

    (9) expression -> expression IFF . expression
    (1) expression -> . VAR
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . LBRAC expression RBRAC
    (5) expression -> . NOT expression
    (6) expression -> . expression AND expression
    (7) expression -> . expression OR expression
    (8) expression -> . expression IFTHEN expression
    (9) expression -> . expression IFF expression

    VAR             shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 4
    LBRAC           shift and go to state 5
    NOT             shift and go to state 6

    expression                     shift and go to state 16

state 11

    (4) expression -> LBRAC expression . RBRAC
    (6) expression -> expression . AND expression
    (7) expression -> expression . OR expression
    (8) expression -> expression . IFTHEN expression
    (9) expression -> expression . IFF expression

    RBRAC           shift and go to state 17
    AND             shift and go to state 7
    OR              shift and go to state 8
    IFTHEN          shift and go to state 9
    IFF             shift and go to state 10


state 12

    (5) expression -> NOT expression .
    (6) expression -> expression . AND expression
    (7) expression -> expression . OR expression
    (8) expression -> expression . IFTHEN expression
    (9) expression -> expression . IFF expression

    AND             reduce using rule 5 (expression -> NOT expression .)
    OR              reduce using rule 5 (expression -> NOT expression .)
    IFTHEN          reduce using rule 5 (expression -> NOT expression .)
    IFF             reduce using rule 5 (expression -> NOT expression .)
    $end            reduce using rule 5 (expression -> NOT expression .)
    RBRAC           reduce using rule 5 (expression -> NOT expression .)

  ! AND             [ shift and go to state 7 ]
  ! OR              [ shift and go to state 8 ]
  ! IFTHEN          [ shift and go to state 9 ]
  ! IFF             [ shift and go to state 10 ]


state 13

    (6) expression -> expression AND expression .
    (6) expression -> expression . AND expression
    (7) expression -> expression . OR expression
    (8) expression -> expression . IFTHEN expression
    (9) expression -> expression . IFF expression

    AND             reduce using rule 6 (expression -> expression AND expression .)
    OR              reduce using rule 6 (expression -> expression AND expression .)
    IFTHEN          reduce using rule 6 (expression -> expression AND expression .)
    IFF             reduce using rule 6 (expression -> expression AND expression .)
    $end            reduce using rule 6 (expression -> expression AND expression .)
    RBRAC           reduce using rule 6 (expression -> expression AND expression .)

  ! AND             [ shift and go to state 7 ]
  ! OR              [ shift and go to state 8 ]
  ! IFTHEN          [ shift and go to state 9 ]
  ! IFF             [ shift and go to state 10 ]


state 14

    (7) expression -> expression OR expression .
    (6) expression -> expression . AND expression
    (7) expression -> expression . OR expression
    (8) expression -> expression . IFTHEN expression
    (9) expression -> expression . IFF expression

    OR              reduce using rule 7 (expression -> expression OR expression .)
    IFTHEN          reduce using rule 7 (expression -> expression OR expression .)
    IFF             reduce using rule 7 (expression -> expression OR expression .)
    $end            reduce using rule 7 (expression -> expression OR expression .)
    RBRAC           reduce using rule 7 (expression -> expression OR expression .)
    AND             shift and go to state 7

  ! AND             [ reduce using rule 7 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 8 ]
  ! IFTHEN          [ shift and go to state 9 ]
  ! IFF             [ shift and go to state 10 ]


state 15

    (8) expression -> expression IFTHEN expression .
    (6) expression -> expression . AND expression
    (7) expression -> expression . OR expression
    (8) expression -> expression . IFTHEN expression
    (9) expression -> expression . IFF expression

    IFTHEN          reduce using rule 8 (expression -> expression IFTHEN expression .)
    IFF             reduce using rule 8 (expression -> expression IFTHEN expression .)
    $end            reduce using rule 8 (expression -> expression IFTHEN expression .)
    RBRAC           reduce using rule 8 (expression -> expression IFTHEN expression .)
    AND             shift and go to state 7
    OR              shift and go to state 8

  ! AND             [ reduce using rule 8 (expression -> expression IFTHEN expression .) ]
  ! OR              [ reduce using rule 8 (expression -> expression IFTHEN expression .) ]
  ! IFTHEN          [ shift and go to state 9 ]
  ! IFF             [ shift and go to state 10 ]


state 16

    (9) expression -> expression IFF expression .
    (6) expression -> expression . AND expression
    (7) expression -> expression . OR expression
    (8) expression -> expression . IFTHEN expression
    (9) expression -> expression . IFF expression

    IFTHEN          reduce using rule 9 (expression -> expression IFF expression .)
    IFF             reduce using rule 9 (expression -> expression IFF expression .)
    $end            reduce using rule 9 (expression -> expression IFF expression .)
    RBRAC           reduce using rule 9 (expression -> expression IFF expression .)
    AND             shift and go to state 7
    OR              shift and go to state 8

  ! AND             [ reduce using rule 9 (expression -> expression IFF expression .) ]
  ! OR              [ reduce using rule 9 (expression -> expression IFF expression .) ]
  ! IFTHEN          [ shift and go to state 9 ]
  ! IFF             [ shift and go to state 10 ]


state 17

    (4) expression -> LBRAC expression RBRAC .

    AND             reduce using rule 4 (expression -> LBRAC expression RBRAC .)
    OR              reduce using rule 4 (expression -> LBRAC expression RBRAC .)
    IFTHEN          reduce using rule 4 (expression -> LBRAC expression RBRAC .)
    IFF             reduce using rule 4 (expression -> LBRAC expression RBRAC .)
    $end            reduce using rule 4 (expression -> LBRAC expression RBRAC .)
    RBRAC           reduce using rule 4 (expression -> LBRAC expression RBRAC .)

